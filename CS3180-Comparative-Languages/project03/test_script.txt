// Andrew Berger
// Project03
// CS 3180
// Spring 2016

// Everything is anonymous except variables.
// Function invocation and object instantiation by variable access only.

// SYMBOLs and NUMs
foo = 5;
print foo; // => 5.0

// ternary operator
foo = 1;
bar = foo > 0 ? "greater than 0" : "not greater than 0";
print bar; // => greater than 0

foo = -1;
foo = foo > 0 ? "greater than 0" : "not greater than 0";
print foo; // => not greater than 0

// while loops
i = 5;
while i > 0 {
  print i;
  i = i - 1;
};

// a do-nothing function
foo = function {};
print foo[]; // =>

// a function with a body
bar = function { print "Hello, world!"; };
bar[]; // => Hello, world!

// a function with parameter
baz = function [qux] { qux + 1; };
print baz[5]; // => 6.0 (all numbers are Floats)

// closures
foo = 10;
bar = function { foo; };
print bar[]; // => 10.0
print foo = 0; // => 0.0
print bar[]; // => 10.0

// currying with inner functions and closures
make_adder = function [value] {
  function [a] {
    a + value;
  };
};
add5 = make_adder[5];
print add5[10]; // => 15.0

// string concatenation
comma = ", ";
print "Hello" + comma + "world!";

// Class with constructor, instance variables.
// Only functions can be defined as direct class members.
animal = class {
  _creator = function[species, sound] {
    _this.species = species;
    _this.sound = sound;
  };

  speak = function {
    i = 0;
    while i < 5 { print _this.sound + " "; i = i + 1; }
  };
};

// instantiation
wolf = animal["wolf", "howl"];
print wolf.species; // => wolf
print wolf.sound; // => howl
wolf.speak[]; // => howl
wolf.sound = "hooooowl";
wolf.speak[]; // => hooooowl

// inheritance
cat = class [animal] {
  _creator = function [name, isFriendly] {
    _super._creator["cat", "meow"];
    _this.name = name;
    _this.isFriendly = isFriendly;
    _this.sleeping = 1;
  };

  // overwriting super class function
  speak = function {
    if _this.isFriendly {
      print _this.name + " says: ";
      _super.speak[];
    } else {
      print "GO AWAY";
    };
  };

  sleep = function { _this.sleeping = 1; };
  wake_up = function { _this.sleeping = 0; };
};

// subclass instantiation
mycat = cat["Mrs. Dr. Razorclaw", 1];
mycat.speak[]; // nothing, my cat is asleep
mycat.speak[]; // => Mrs. Dr. Razorclaw says meow
mycat.isFriendly = 0;
mycat.speak[]; // => GO AWAY

// polymorphism
poly_speak = function [instance] {
  instance.speak[];
};

poly_speak[wolf]; // => hooooowl
poly_speak[mycat]; // => GO AWAY
