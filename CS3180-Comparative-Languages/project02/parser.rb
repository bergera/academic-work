#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

##
# Andrew Berger
# Project02
# CS 3180
# Spring 2016
#
# Tested with Ruby v2.3.0

require "./scanner"
require "./nodes"

module Project02

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 154)

  def parse(code)
    @yydebug = true
    @tokens = Scanner::Tokenizer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    26,    19,    27,    45,    18,    30,    46,    28,    29,     9,
    17,    26,    19,    27,    53,    18,    50,    54,    28,    29,
    56,    17,    55,    21,    45,    70,    68,    71,    26,    19,
    27,    10,    18,    11,    21,    28,    29,    74,    17,    32,
    33,    82,    26,    48,    27,    32,    33,     5,     9,    28,
    29,    21,    26,    19,    27,    10,    18,    11,    45,    28,
    29,    46,    17,    83,    84,    21,    26,    19,    27,    88,
    84,     5,     9,    28,    29,    21,    26,    19,    27,    10,
    18,    11,    85,    28,    29,    86,    17,    77,     9,    21,
    32,    33,    34,    35,    91,     5,     9,    42,     9,    21,
    26,    19,    27,     9,    18,    98,    99,    28,    29,   nil,
    17,    26,    19,    27,   nil,    18,   nil,   nil,    28,    29,
   nil,    17,   nil,    21,   nil,    26,    19,    27,   nil,    18,
   nil,   nil,    28,    29,    21,    17,    26,    19,    27,   nil,
    18,   nil,   nil,    28,    29,   nil,    17,   nil,    21,   nil,
    26,    19,    27,   nil,    18,   nil,   nil,    28,    29,    21,
    17,    26,    19,    27,   nil,    18,   nil,   nil,    28,    29,
   nil,    17,   nil,    21,   nil,    26,    19,    27,   nil,    18,
   nil,   nil,    28,    29,    21,    17,    26,    19,    27,   nil,
    18,   nil,   nil,    28,    29,   nil,    17,   nil,    21,   nil,
    26,    19,    27,   nil,    18,   nil,   nil,    28,    29,    21,
    17,    26,    19,    27,   nil,    18,   nil,   nil,    28,    29,
   nil,    17,   nil,    21,   nil,    26,    19,    27,   nil,    18,
   nil,   nil,    28,    29,    21,    17,    26,    19,    27,    10,
    18,    11,   nil,    28,    29,   nil,    17,   nil,    21,    32,
    33,    34,    35,   nil,   nil,     5,     9,    64,   nil,    21,
    26,    19,    27,   nil,    18,   nil,   nil,    28,    29,   nil,
    17,    26,    48,    27,    26,    19,    27,   nil,    28,    29,
   nil,    28,    29,    21,    26,    19,    27,    45,    92,   nil,
    71,    28,    29,   nil,    21,    89,   nil,    21,    26,    19,
    27,   nil,    18,   nil,   nil,    28,    29,    21,    17,    26,
    19,    27,   nil,    18,   nil,   nil,    28,    29,   nil,    17,
   nil,    21,   nil,    26,    19,    27,   nil,    18,   nil,   nil,
    28,    29,    21,    17,    26,    19,    27,   nil,   nil,   nil,
   nil,    28,    29,   nil,   nil,   nil,    21,    32,    33,    34,
    35,    36,    37,    38,   nil,   101,   nil,    21,   nil,   nil,
    73,    32,    33,    34,    35,    36,    37,    38,   nil,   nil,
   nil,   nil,    81,    32,    33,    34,    35,    36,    37,    38,
   nil,   nil,     9,    32,    33,    34,    35,    36,    37,    38,
   nil,   nil,     9,    32,    33,    34,    35,    36,    37,    38,
   nil,    31,    32,    33,    34,    35,    36,    37,    38,   nil,
    31,    32,    33,    34,    35,    36,    37,    38,    32,    33,
    34,    35,    36,    37,    38,    32,    33,    34,    35,    36,
    37,    38,    32,    33,    34,    35,    36,    37,    38,    32,
    33,    34,    35,    36,    37,    38,    32,    33,    34,    35,
    36,    37,    38 ]

racc_action_check = [
    45,    45,    45,    15,    45,     1,    15,    45,    45,    28,
    45,    53,    53,    53,    28,    53,    19,    29,    53,    53,
    30,    53,    29,    45,    47,    46,    45,    47,     0,     0,
     0,     0,     0,     0,    53,     0,     0,    53,     0,    59,
    59,    66,    17,    17,    17,    60,    60,     0,     0,    17,
    17,     0,     3,     3,     3,     3,     3,     3,    76,     3,
     3,    76,     3,    69,    69,    17,    54,    54,    54,    75,
    75,     3,     3,    54,    54,     3,     9,     9,     9,     9,
     9,     9,    70,     9,     9,    71,     9,    54,    74,    54,
    61,    61,    61,    61,    79,     9,     9,     9,    82,     9,
    10,    10,    10,    88,    10,    90,    92,    10,    10,   nil,
    10,    11,    11,    11,   nil,    11,   nil,   nil,    11,    11,
   nil,    11,   nil,    10,   nil,    18,    18,    18,   nil,    18,
   nil,   nil,    18,    18,    11,    18,    21,    21,    21,   nil,
    21,   nil,   nil,    21,    21,   nil,    21,   nil,    18,   nil,
    32,    32,    32,   nil,    32,   nil,   nil,    32,    32,    21,
    32,    33,    33,    33,   nil,    33,   nil,   nil,    33,    33,
   nil,    33,   nil,    32,   nil,    34,    34,    34,   nil,    34,
   nil,   nil,    34,    34,    33,    34,    35,    35,    35,   nil,
    35,   nil,   nil,    35,    35,   nil,    35,   nil,    34,   nil,
    36,    36,    36,   nil,    36,   nil,   nil,    36,    36,    35,
    36,    37,    37,    37,   nil,    37,   nil,   nil,    37,    37,
   nil,    37,   nil,    36,   nil,    38,    38,    38,   nil,    38,
   nil,   nil,    38,    38,    37,    38,    41,    41,    41,    41,
    41,    41,   nil,    41,    41,   nil,    41,   nil,    38,    62,
    62,    62,    62,   nil,   nil,    41,    41,    41,   nil,    41,
    50,    50,    50,   nil,    50,   nil,   nil,    50,    50,   nil,
    50,    55,    55,    55,    78,    78,    78,   nil,    55,    55,
   nil,    78,    78,    50,    99,    99,    99,    80,    80,   nil,
    80,    99,    99,   nil,    55,    78,   nil,    78,    81,    81,
    81,   nil,    81,   nil,   nil,    81,    81,    99,    81,    84,
    84,    84,   nil,    84,   nil,   nil,    84,    84,   nil,    84,
   nil,    81,   nil,    85,    85,    85,   nil,    85,   nil,   nil,
    85,    85,    84,    85,   100,   100,   100,   nil,   nil,   nil,
   nil,   100,   100,   nil,   nil,   nil,    85,    51,    51,    51,
    51,    51,    51,    51,   nil,   100,   nil,   100,   nil,   nil,
    51,    63,    63,    63,    63,    63,    63,    63,   nil,   nil,
   nil,   nil,    63,    43,    43,    43,    43,    43,    43,    43,
   nil,   nil,    43,    44,    44,    44,    44,    44,    44,    44,
   nil,   nil,    44,     2,     2,     2,     2,     2,     2,     2,
   nil,     2,    40,    40,    40,    40,    40,    40,    40,   nil,
    40,    49,    49,    49,    49,    49,    49,    49,    67,    67,
    67,    67,    67,    67,    67,    72,    72,    72,    72,    72,
    72,    72,    93,    93,    93,    93,    93,    93,    93,    95,
    95,    95,    95,    95,    95,    95,    96,    96,    96,    96,
    96,    96,    96 ]

racc_action_pointer = [
    26,     5,   380,    50,   nil,   nil,   nil,   nil,   nil,    74,
    98,   109,   nil,   nil,   nil,   -24,   nil,    40,   123,    -4,
   nil,   134,   nil,   nil,   nil,   nil,   nil,   nil,   -13,    -5,
    20,   nil,   148,   159,   173,   184,   198,   209,   223,   nil,
   389,   234,   nil,   360,   370,    -2,    22,    -3,   nil,   398,
   258,   334,   nil,     9,    64,   269,   nil,   nil,   nil,    26,
    32,    77,   236,   348,   nil,   nil,    33,   405,   nil,    35,
    62,    82,   412,   nil,    66,    41,    31,   nil,   272,    73,
   260,   296,    76,   nil,   307,   321,   nil,   nil,    81,   nil,
    84,   nil,    84,   419,   nil,   426,   433,   nil,   nil,   282,
   332,   nil ]

racc_action_default = [
   -54,   -54,    -1,    -2,    -3,    -5,    -7,    -8,    -9,   -54,
   -54,   -54,   -21,   -22,   -23,   -24,   -25,   -26,   -54,   -39,
   -30,   -54,   -33,   -34,   -35,   -36,   -37,   -38,   -54,   -54,
   -54,    -6,   -54,   -54,   -54,   -54,   -54,   -54,   -54,    -4,
   -54,   -54,   -10,   -54,   -54,   -54,   -54,   -27,   -39,   -28,
   -54,   -54,   -42,   -54,   -54,   -54,   102,   -15,   -16,   -17,
   -18,   -19,   -20,   -54,   -11,   -12,   -13,   -45,   -40,   -54,
   -52,   -54,   -29,   -32,   -54,   -54,   -54,   -47,   -54,   -54,
   -54,   -54,   -54,   -41,   -54,   -54,   -52,   -43,   -54,   -48,
   -54,   -50,   -54,   -31,   -14,   -46,   -53,   -44,   -51,   -54,
   -54,   -49 ]

racc_goto_table = [
     2,    52,    39,    79,    47,     3,    78,    69,     1,   nil,
    43,    44,   nil,   nil,    41,    75,    65,    66,    49,   nil,
   nil,    51,   nil,   nil,   nil,   nil,   nil,    90,   nil,   nil,
   nil,   nil,    57,    58,    59,    60,    61,    62,    63,   nil,
    39,    76,    80,   nil,   nil,    67,   nil,    87,    79,    90,
    72,   100,   nil,    67,   nil,    94,   nil,   nil,   nil,   nil,
   nil,    97,   nil,   nil,   nil,    76,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    93,   nil,   nil,    95,    96,    76,    76 ]

racc_goto_check = [
     2,     7,     4,    10,    11,     3,    19,    18,     1,   nil,
     2,     2,   nil,   nil,     3,    18,     7,     7,     2,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,     2,     2,     2,     2,     2,     2,     2,   nil,
     4,    11,    11,   nil,   nil,     2,   nil,     7,    10,    10,
     2,    19,   nil,     2,   nil,     7,   nil,   nil,   nil,   nil,
   nil,     7,   nil,   nil,   nil,    11,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,     2,     2,    11,    11 ]

racc_goto_pointer = [
   nil,     8,     0,     5,    -1,   nil,   nil,   -27,   nil,   nil,
   -51,   -13,   nil,   nil,   nil,   nil,   nil,   nil,   -38,   -48 ]

racc_goto_default = [
   nil,   nil,    40,   nil,     4,     6,     7,     8,    12,    13,
    14,    15,    16,    20,    22,    23,    24,    25,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 32, :_reduce_1,
  1, 32, :_reduce_2,
  1, 34, :_reduce_3,
  2, 34, :_reduce_4,
  1, 35, :_reduce_5,
  2, 35, :_reduce_6,
  1, 35, :_reduce_7,
  1, 35, :_reduce_8,
  1, 35, :_reduce_9,
  2, 38, :_reduce_10,
  3, 38, :_reduce_11,
  3, 36, :_reduce_12,
  3, 37, :_reduce_13,
  5, 37, :_reduce_14,
  3, 33, :_reduce_15,
  3, 33, :_reduce_16,
  3, 33, :_reduce_17,
  3, 33, :_reduce_18,
  3, 33, :_reduce_19,
  3, 33, :_reduce_20,
  1, 33, :_reduce_21,
  1, 33, :_reduce_22,
  1, 33, :_reduce_23,
  1, 33, :_reduce_24,
  1, 33, :_reduce_25,
  1, 43, :_reduce_26,
  2, 43, :_reduce_27,
  2, 40, :_reduce_28,
  3, 41, :_reduce_29,
  1, 41, :_reduce_30,
  5, 39, :_reduce_31,
  3, 42, :_reduce_32,
  1, 42, :_reduce_33,
  1, 42, :_reduce_34,
  1, 42, :_reduce_35,
  1, 42, :_reduce_36,
  1, 42, :_reduce_37,
  1, 42, :_reduce_38,
  1, 42, :_reduce_39,
  3, 46, :_reduce_40,
  4, 46, :_reduce_41,
  2, 45, :_reduce_42,
  4, 45, :_reduce_43,
  5, 45, :_reduce_44,
  1, 49, :_reduce_45,
  3, 49, :_reduce_46,
  3, 48, :_reduce_47,
  4, 48, :_reduce_48,
  7, 48, :_reduce_49,
  2, 50, :_reduce_50,
  3, 50, :_reduce_51,
  3, 47, :_reduce_52,
  5, 44, :_reduce_53 ]

racc_reduce_n = 54

racc_shift_n = 102

racc_token_table = {
  false => 0,
  :error => 1,
  :NUMBER => 2,
  :SYMBOL => 3,
  :STRING => 4,
  :WHILE => 5,
  :PRINT => 6,
  :IF => 7,
  :ELSE => 8,
  :FUNCTION => 9,
  :CLASS => 10,
  :CREATE => 11,
  :DESCRIBE => 12,
  "*" => 13,
  "/" => 14,
  "+" => 15,
  "-" => 16,
  "<" => 17,
  ">" => 18,
  "?" => 19,
  "=" => 20,
  ";" => 21,
  "{" => 22,
  "}" => 23,
  ":" => 24,
  "(" => 25,
  ")" => 26,
  "[" => 27,
  "]" => 28,
  "," => 29,
  "." => 30 }

racc_nt_base = 31

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NUMBER",
  "SYMBOL",
  "STRING",
  "WHILE",
  "PRINT",
  "IF",
  "ELSE",
  "FUNCTION",
  "CLASS",
  "CREATE",
  "DESCRIBE",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"<\"",
  "\">\"",
  "\"?\"",
  "\"=\"",
  "\";\"",
  "\"{\"",
  "\"}\"",
  "\":\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "\".\"",
  "$start",
  "Program",
  "Expr",
  "StatementList",
  "Statement",
  "While",
  "Conditional",
  "Block",
  "Ternary",
  "Print",
  "Assignment",
  "Value",
  "Describe",
  "InstanceMemberAssignment",
  "Function",
  "Invocation",
  "InstanceMemberAccess",
  "ClassDef",
  "ExprList",
  "ClassBlock" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 27)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_3(val, _values, result)
     result = Node.new(children: val[0], type: :StatementList) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_4(val, _values, result)
     val[0].add_child(val[1]); result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 37)
  def _reduce_5(val, _values, result)
     result = Node.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 40)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_9(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_10(val, _values, result)
     result = Node.new(children: Node.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_11(val, _values, result)
     result = Node.new(children: val[1], type: :Block) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_12(val, _values, result)
     result = Node.new(children: [val[1], val[2]], type: :While) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_13(val, _values, result)
     result = Node.new(children: [val[1], val[2]], type: :Conditional) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_14(val, _values, result)
     result = Node.new(children: [val[1], val[2], val[4]], type: :Conditional) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_15(val, _values, result)
     result = Node.new(value: val[1], children: [val[0], val[2]], type: :Operation) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_16(val, _values, result)
     result = Node.new(value: val[1], children: [val[0], val[2]], type: :Operation) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_17(val, _values, result)
     result = Node.new(value: val[1], children: [val[0], val[2]], type: :Operation) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_18(val, _values, result)
     result = Node.new(value: val[1], children: [val[0], val[2]], type: :Operation) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_19(val, _values, result)
     result = Node.new(value: val[1], children: [val[0], val[2]], type: :Operation) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_20(val, _values, result)
     result = Node.new(value: val[1], children: [val[0], val[2]], type: :Operation) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 65)
  def _reduce_21(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_22(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_23(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_24(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_25(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 73)
  def _reduce_26(val, _values, result)
     result = Node.new(type: :Describe) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_27(val, _values, result)
     result = Node.new(children: val[1], type: :Describe) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_28(val, _values, result)
     result = Node.new(children: val[1], type: :Print) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_29(val, _values, result)
     result = Node.new(value: val[0].value, children: val[2], type: :SymbolAssignment) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_30(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_31(val, _values, result)
     result = Node.new(children: [val[0], val[2], val[4]], type: :TernaryConditional) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_32(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_33(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_34(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_35(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_36(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_37(val, _values, result)
     result = Node.new(value: val[0].value, type: :NumberValue) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_38(val, _values, result)
     result = Node.new(value: val[0].value, type: :StringValue) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_39(val, _values, result)
     result = Node.new(value: val[0].value, type: :SymbolAccess) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_40(val, _values, result)
     result = Node.new(children: val[0], type: :Invocation) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_41(val, _values, result)
     result = Node.new(children: [val[0], val[2]], type: :Invocation) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_42(val, _values, result)
     val[1].type = :FunctionBody; result = Function.new(body: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_43(val, _values, result)
     val[3].type = :FunctionBody; result = Function.new(body: val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_44(val, _values, result)
     val[4].type = :FunctionBody; result = Function.new(body: val[4], params: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_45(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_46(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_47(val, _values, result)
     result = Klass.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_48(val, _values, result)
     result = Klass.new(body: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_49(val, _values, result)
     result = Klass.new(body: val[5], super_klass: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_50(val, _values, result)
     result = Node.new(children: val[0], type: :StatementList) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_51(val, _values, result)
     val[0].add_child(val[1]); result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_52(val, _values, result)
     result = Node.new(value: val[2], children: val[0], type: :InstanceMemberAccess)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_53(val, _values, result)
     result = Node.new(value: val[2], children: [val[0], val[4]], type: :InstanceMemberAssignment) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
